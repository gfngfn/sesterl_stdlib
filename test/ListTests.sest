import List

module ListTests = #[test] struct

  #[test]
  val map_test() =
    Testing.it("map", fun() ->
      assert Testing.equal(
        -expect [4, 2, 5, 2, 6, 10, 3],
        -got List.map(fun(n) -> n + 1 end, [3, 1, 4, 1, 5, 9, 2]),
      )
    end)

  val is_even(n) =
    (n / 2) * 2 == n

  #[test]
  val filter_test() =
    Testing.it("filter", fun() ->
      assert Testing.equal(
        -expect [4, 2],
        -got List.filter(is_even, [3, 1, 4, 1, 5, 9, 2]),
      )
    end)

  #[test]
  val filter_map_test() =
    Testing.it("filter_map", fun() ->
      assert Testing.equal(
        -expect [6, 2, 2, 10, 18],
        -got
          List.filter_map(
            fun(n) ->
              if is_even(n) then None else Some(n * 2)
            end,
            [3, 1, 4, 1, 5, 9, 2],
          )
      )
    end)

  #[test]
  val append_test() =
    Testing.it("append", fun() ->
      assert Testing.equal(
        -expect [3, 1, 4, 1, 5, 9, 2],
        -got List.append([3, 1, 4], [1, 5, 9, 2]),
      )
    end)

  #[test]
  val reverse_test() =
    Testing.it("reverse", fun() ->
      assert Testing.equal(
        -expect [2, 9, 5, 1, 4, 1, 3],
        -got List.reverse([3, 1, 4, 1, 5, 9, 2]),
      )
    end)

  #[test]
  val length_test() =
    Testing.it("length", fun() ->
      assert Testing.equal(
        -expect 7,
        -got List.length([3, 1, 4, 1, 5, 9, 2]),
      )
    end)

  #[test]
  val foldl_test() =
    Testing.it("foldl", fun() ->
      assert Testing.equal(
        -expect 75,
        -got List.foldl(fun(acc, n) -> acc - n end, 100, [3, 1, 4, 1, 5, 9, 2])
      )
    end)

  #[test]
  val all_test() =
    Testing.list(
      List.map(
        fun(test_case) ->
          let {title, expected, predicate} = test_case in
          Testing.it(title, fun() ->
            assert Testing.equal(
              -expect expected,
              -got List.all(predicate, [3, 1, 4, 1, 5, 9, 2]),
            )
          end)
        end,
        [
          {"all ( < 10)", true, fun(n) -> n < 10 end},
          {"all (is_even)", false, is_even},
        ]))

  type message<$a> =
    | Store($a)
    | End(pid<list<$a>>)

  val rec loop(vs) = act
    receive
    | Store(v)  -> loop(v :: vs)
    | End(from) -> send(from, List.reverse(vs))
    end

  #[test]
  val for_each_test() = act
    do server <- spawn(fun() -> act loop([]) end) in
    do dummy <-
      List.for_each(
        fun(n) -> act send(server, Store(n + 1)) end,
        [3, 1, 4, 1, 5, 9, 2])
    in
    do me <- self() in
    do dummy <- send(server, End(me)) in
    receive
    | ns ->
        return(Testing.it("for_each", fun() ->
          assert Testing.equal(
            -expect [4, 2, 5, 2, 6, 10, 3],
            -got ns,
          )
        end))
    end


end
