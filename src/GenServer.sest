import RawValue
import ServerUtil

module GenServer = struct
  open ServerUtil

  type initialized<$state, $reason> = result<$state, $reason>

  val init_ok(state) = act
    return(Ok(state))

  val init_stop(reason) = act
    return(Error(reason))

  type reply<$msg, $response, $reason, $state> =
    | ReplyImpl($response, $state, option<int>)
    | ReplyAndStopImpl($reason, $response, $state)

  val reply<$msg, $response, $reason, $state>(response : $response, state : $state, ?timeout timeout : option<int>) : [$msg]reply<$msg, $response, $reason, $state> = act
    return(ReplyImpl(response, state, timeout))

  val reply_and_stop<$msg, $response, $reason, $state>(reason : $reason, response : $response, state : $state) : [$msg]reply<$msg, $response, $reason, $state> = act
    return(ReplyAndStopImpl(reason, response, state))

  type no_reply<$reason, $state> =
    | NoReplyImpl($state, option<int>)
    | NoReplyAndStopImpl($reason, $state)

  val no_reply<$msg, $reason, $state>(state : $state, ?timeout timeout : option<int>) : [$msg]no_reply<$reason, $state> = act
    return(NoReplyImpl(state, timeout))

  val no_reply_and_stop<$msg, $reason, $state>(reason : $reason, state : $state) : [$msg]no_reply<$reason, $state> = act
    return(NoReplyAndStopImpl(reason, state))

  type start_link_error = RawValue.t

  signature Behaviour = sig
    type init_arg :: o
    type request :: o  /* temporary; should be a unary GADT */
    type response :: o  /* temporary; should be a unary GADT  */
    type cast_message :: o
    type info :: o
    type state :: o
    type global :: o
    type stop_reason :: o
    val init : fun(init_arg) -> [info]initialized<state, stop_reason>
    val handle_call<$a> : fun(request, pid<$a>, state) -> [info]reply<info, response, stop_reason, state>
    val handle_cast : fun(cast_message, state) -> [info]no_reply<stop_reason, state>
    val handle_info : fun(info, state) -> [info]no_reply<stop_reason, state>
    val handle_timeout : fun(state) -> [info]no_reply<stop_reason, state>
    val terminate : fun(state) -> [info]unit
  end

  module Make = fun(Callback : Behaviour) -> #[behaviour("gen_server")] struct
    type request = Callback.request
    type response = Callback.response
    type cast_message = Callback.cast_message
    type proc = pid<Callback.info>

    val init_impl(arg : Callback.init_arg) = act
      Callback.init(arg)

    val init<$a> : $a = external 1 ```
      init(Args) ->
          case ?MODULE:init_impl(Args) of
              {ok, State}     -> {ok, State};
              {error, Reason} -> {stop, Reason}
          end.
    ```

    val handle_call_impl<$a>(req : Callback.request, pid : pid<$a>, state : Callback.state) = act
      Callback.handle_call(req, pid, state)

    val handle_call<$a> : $a = external 3 ```
      handle_call(Msg, From, State0) ->
          {Pid, _} = From,
          case ?MODULE:handle_call_impl(Msg, Pid, State0) of
              {reply_impl, Response, State1, MaybeTimeout} ->
                  case MaybeTimeout of
                      error         -> {reply, Response, State1};
                      {ok, Timeout} -> {reply, Response, State1, Timeout}
                  end;
              {reply_and_stop_impl, Reason, Response, State2} ->
                  {stop, Reason, Response, State2}
          end.
    ```

    val handle_cast_impl(msg : Callback.cast_message, state : Callback.state) = act
      Callback.handle_cast(msg, state)

    val arrange_no_reply_result<$a> : $a = external 1 ```
      arrange_no_reply_result(Result) ->
          case Result of
              {no_reply_impl, State1, MaybeTimeout} ->
                  case MaybeTimeout of
                      error         -> {noreply, State1};
                      {ok, Timeout} -> {noreply, State1, Timeout}
                  end;
              {no_reply_and_stop_impl, Reason, State2} ->
                  {stop, Reason, State2}
          end.
    ```

    val handle_cast<$a> : $a = external 2 ```
      handle_cast(Msg, State0) ->
          Result = ?MODULE:handle_cast_impl(Msg, State0),
          ?MODULE:arrange_no_reply_result(Result).
    ```

    val handle_info_impl(info : Callback.info, state : Callback.state) = act
      Callback.handle_info(info, state)

    val handle_timeout_impl(state : Callback.state) = act
      Callback.handle_timeout(state)

    val handle_info<$a> : $a = external 2 ```
      handle_info(Msg, State0) ->
          Result =
              case Msg of
                  timeout            -> handle_timeout_impl(State0);
                  {'$sesterl', Info} -> handle_info_impl(Info, State0)
              end,
          ?MODULE:arrange_no_reply_result(Result).
    ```

    val terminate_impl(state : Callback.state) = act
      Callback.terminate(state)

    val terminate<$a> : $a = external 2 ```
      terminate(_Reason, State) ->
          terminate_impl(State).
    ```

    val call<$a> : fun(proc, request, ?timeout int) -> [$a]response = external 2+ ```
      call(Pid, Msg) ->
          gen_server:call(Pid, Msg).

      call(Pid, Msg, Options) ->
          case maps:find(timeout, Options) of
              {ok, Timeout} -> gen_server:call(Pid, Msg, Timeout);
              error         -> gen_server:call(Pid, Msg)
          end.
    ```

    val cast<$a> : fun(proc, cast_message) -> [$a]unit = external 2 ```
      cast(Pid, Msg) ->
          gen_server:cast(Pid, Msg).
    ```

    val as_pid(proc : proc) =
      proc

    val from_pid(pid : proc) =
      pid

    val start_link<$a> : fun(Callback.init_arg) -> [$a]result<proc, start_link_error> = external 1 ```
      start_link(Args) ->
          Result = gen_server:start_link(?MODULE, Args, []),
          % io:format("debug L('o' )J returns: ~p~n", [Result]),
          Result.
    ```

    val start_link_name<$a> : fun(Callback.init_arg, -name name<Callback.global>) -> [$a]result<proc, start_link_error> = external 2 ```
      start_link_name(Args, NameImpl) ->
          % io:format("debug L('o' )J (~p) GS start_link_name (pre):~n  ~p~n", [?MODULE, Args]),
          Name =
              case NameImpl of
                  {local, Bin} -> {local, erlang:binary_to_atom(Bin, utf8)};
                  {global, X}  -> {global, {?MODULE, X}}
              end,
          % io:format("debug L('o' )J (~p) GS start_link_name (arg):~n  ~p~n", [?MODULE, Args]),
          Result = gen_server:start_link(Name, ?MODULE, Args, []),
          % io:format("debug L('o' )J (~p) GS start_link_name (ret):~n  ~p~n", [?MODULE, Result]),
          Result.
    ```

    val where_is_local<$a> : fun(binary) -> [$a]option<proc> = external 1 ```
      where_is_local(NameBin) ->
          NameAtom = erlang:binary_to_atom(NameBin, utf8),
          case erlang:whereis(NameAtom) of
              Pid when is_pid(Pid) -> {ok, Pid};
              _                    -> error
          end.
    ```

    val where_is_global<$a> : fun(Callback.global) -> [$a]option<proc> = external 1 ```
      where_is_global(X) ->
          case global:whereis_name({?MODULE, X}) of
              Pid when is_pid(Pid) -> {ok, Pid};
              undefined            -> error
          end.
    ```

    val stop<$a> : fun(proc) -> [$a]unit = external 1 ```
      stop(Pid) ->
          gen_server:stop(Pid).
    ```

    val send_info(pid : proc, info : Callback.info) = act
      send(pid, info)

  end

end
