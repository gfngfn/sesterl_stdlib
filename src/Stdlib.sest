import Bool
import Binary
import Option
import Result
import List
import RawMap
import RawValue
import ServerUtil
import GenServer
import Supervisor

module Stdlib :> sig

  type name<$a> =
    | Local(binary)
    | Global($a)

  module Bool : sig
    val not : fun(bool) -> bool
  end

  module Binary : sig
    val equal : fun(binary, binary) -> bool
    val from_list : fun(list<char>) -> binary
    val to_list : fun(binary) -> list<char>
    val to_list_sub : fun(binary, -pos int, -len int) -> option<list<char>>
    val at : fun(binary, -pos int) -> option<char>
  end

  module Option : sig
    val get<$a> : fun(option<$a>, -default $a) -> $a
    val get_or_invoke<$a> : fun(option<$a>, -default fun() -> $a) -> $a
    val map<$a, $b> : fun(fun($a) -> $b, option<$a>) -> option<$b>
    val bind<$a, $b> : fun(option<$a>, fun($a) -> option<$b>) -> option<$b>
  end

  module Result : sig
    val map<$a, $b, $e> : fun(fun($a) -> $b, result<$a, $e>) -> result<$b, $e>
    val map_error<$a, $e1, $e2> : fun(fun($e1) -> $e2, result<$a, $e1>) -> result<$a, $e2>
    val bind<$a, $b, $e> : fun(result<$a, $e>, fun($a) -> result<$b, $e>) -> result<$b, $e>
    val from_option<$a, $e> : fun(option<$a>, -error $e) -> result<$a, $e>
  end

  module List : sig
    val map<$a, $b> : fun(fun($a) -> $b, list<$a>) -> list<$b>
    val filter<$a> : fun(fun($a) -> bool, list<$a>) -> list<$a>
    val filter_map<$a, $b> : fun(fun($a) -> option<$b>, list<$a>) -> list<$b>
    val for_each<$msg, $a> : fun(fun($a) -> [$msg]unit, list<$a>) -> [$msg]unit
    val foldl<$a, $b> : fun(fun($b, $a) -> $b, $b, list<$a>) -> $b
    val foldl_effect<$m, $a, $b> : fun(fun($b, $a) -> [$m]$b, $b, list<$a>) -> [$m]$b
    val foldr<$a, $b> : fun(fun($a, $b) -> $b, $b, list<$a>) -> $b
    val all<$a> : fun(fun($a) -> bool, list<$a>) -> bool
    val any<$a> : fun(fun($a) -> bool, list<$a>) -> bool
    val append<$a> : fun(list<$a>, list<$a>) -> list<$a>
    val reverse<$a> : fun(list<$a>) -> list<$a>
    val length<$a> : fun(list<$a>) -> int
  end

  module RawMap : sig
    type t :: (o, o) -> o
    val new<$k, $v> : fun() -> t<$k, $v>
    val put<$k, $v> : fun($k, $v, t<$k, $v>) -> t<$k, $v>
    val find<$k, $v> : fun($k, t<$k, $v>) -> option<$v>
    val remove<$k, $v> : fun($k, t<$k, $v>) -> t<$k, $v>
    val to_list<$k, $v> : fun(t<$k, $v>) -> list<{$k, $v}>
    val merge<$k, $v> : fun(t<$k, $v>, t<$k, $v>) -> t<$k, $v>
    val map<$k, $v1, $v2> : fun(fun($v1) -> $v2, t<$k, $v1>) -> t<$k, $v2>
  end

  module RawValue : sig
    type t :: o

    type structure =
      | Int(int)
      | Float(float)
      | Atom(binary)
      | Binary(binary)
      | Tuple(list<t>)
      | Nil
      | Cons(t, t)
      | Map(list<{t, t}>)
      | Fun(binary)
      | Pid(binary)
      | Port(binary)
      | Ref(binary)
      | Other(binary)

    val show : fun(t) -> binary

    val lift : fun(t) -> structure

    val forget<$a> : fun($a) -> t
  end

  module GenServer : sig

    type initialized :: (o, o) -> o

    val init_ok<$msg, $state, $reason> : fun($state) -> [$msg]initialized<$state, $reason>

    val init_stop<$msg, $state, $reason> : fun($reason) -> [$msg]initialized<$state, $reason>

    type reply :: (o, o, o) -> o

    val reply<$msg, $response, $state> :
      fun($response, $state) -> [$msg]reply<$msg, $response, $state>

    val reply_fast<$msg, $response, $state> :
      fun($response, -rest fun() -> [$msg]$state) -> [$msg]reply<$msg, $response, $state>

    type no_reply :: (o) -> o

    val no_reply<$msg, $state> : fun($state) -> [$msg]no_reply<$state>

    type start_link_error = RawValue.t

    signature Behaviour = sig
      type init_arg :: o
      type request :: o  /* temporary; should be a unary GADT */
      type response :: o  /* temporary; should be a unary GADT  */
      type cast_message :: o
      type info :: o
      type state :: o
      type global :: o
      type stop_reason :: o
      val init : fun(init_arg) -> [info]initialized<state, stop_reason>
      val handle_call<$a> : fun(request, pid<$a>, state) -> [info]reply<info, response, state>
      val handle_cast : fun(cast_message, state) -> [info]no_reply<state>
      val handle_info : fun(info, state) -> [info]no_reply<state>
      val terminate : fun(state) -> [info]unit
    end

    module Make : fun(Callback : Behaviour) -> sig
      type proc :: o
      val as_pid : fun(proc) -> pid<Callback.info>
      val from_pid : fun(pid<Callback.info>) -> proc
      val call<$a> : fun(proc, Callback.request, ?timeout int) -> [$a]Callback.response
      val cast<$a> : fun(proc, Callback.cast_message) -> [$a]unit
      val send_info<$a> : fun(proc, Callback.info) -> [$a]unit
      val start_link<$a> : fun(Callback.init_arg) -> [$a]result<proc, start_link_error>
      val start_link_name<$a> : fun(Callback.init_arg, -name name<Callback.global>) -> [$a]result<proc, start_link_error>
      val where_is_local<$a> : fun(binary) -> [$a]option<proc>
      val where_is_global<$a> : fun(Callback.global) -> [$a]option<proc>
      val stop<$a> : fun(proc) -> [$a]unit
    end
  end

  module Supervisor : sig
    type restart =
      | Permanent | Transient | Temporary

    type shutdown =
      | BrutalKill | Timeout(int) | Infinity

    type worker =
      | Worker | Supervisor

    module Static : sig
      type start_link_error = RawValue.t
      type child_proc :: o
      val make_child_proc<$a, $b, $c, $reason> : fun(fun() -> [$b]result<pid<$a>, $reason>) -> [$c]child_proc
      type child_spec :: (o, o) -> o
      val make_child_spec<$msg, $id> :
        fun(
          -id       $id,
          -start    frozen<unit, $msg, child_proc>,
          ?restart  restart,
          ?shutdown shutdown,
          ?type     worker,
        ) -> child_spec<$msg, $id>

      type strategy =
        | OneForAll | OneForOne | RestForOne

      type sup_flags :: o
      val make_sup_flags : fun(?strategy strategy, ?intensity int, ?period int) -> sup_flags
      type initialized :: (o, o) -> o
      val init_ok<$msg, $id> : fun(sup_flags, list<child_spec<$msg, $id>>) -> [$msg]initialized<$msg, $id>

      signature Behaviour = sig
        type child_id :: o
        type init_arg :: o
        type info :: o
        type global :: o
        val init : fun(init_arg) -> [info]initialized<info, child_id>
      end

      module Make : fun(Callback : Behaviour) -> sig
        type proc :: o
        val as_pid : fun(proc) -> pid<Callback.info>
        val from_pid : fun(pid<Callback.info>) -> proc
        val start_link<$a> : fun(Callback.init_arg) -> [$a]result<proc, start_link_error>
        val start_link_name<$a> : fun(Callback.init_arg, -name name<Callback.global>) -> [$a]result<proc, start_link_error>
        val where_is_local<$a> : fun(binary) -> [$a]option<proc>
        val where_is_global<$a> : fun(Callback.global) -> [$a]option<proc>
      end
    end

    module Dynamic : sig
      type start_link_error = RawValue.t
      type start_child_error = RawValue.t
      type child_proc :: (o) -> o
      val make_child_proc<$b, $child_msg, $c, $reason> : fun(fun() -> [$b]result<pid<$child_msg>, $reason>) -> [$c]child_proc<$child_msg>
      type child_spec :: (o, o, o) -> o
      val make_child_spec<$msg, $arg, $child_msg> :
        fun(
          -start    frozen<{$arg}, $msg, child_proc<$child_msg>>,
          ?restart  restart,
          ?shutdown shutdown,
          ?type     worker,
        ) -> child_spec<$msg, $arg, $child_msg>
      type sup_flags :: o
      val make_sup_flags : fun(?intensity int, ?period int) -> sup_flags
      type initialized :: (o, o, o) -> o
      val init_ok<$msg, $arg, $child_msg> : fun(sup_flags, child_spec<$msg, $arg, $child_msg>) -> [$msg]initialized<$msg, $arg, $child_msg>

      signature Behaviour = sig
        type init_arg :: o
        type start_arg :: o
        type info :: o
        type child_info :: o
        type global :: o
        val init : fun(init_arg) -> [info]initialized<info, start_arg, child_info>
      end

      module Make : fun(Callback : Behaviour) -> sig
        type proc :: o
        val as_pid : fun(proc) -> pid<Callback.info>
        val from_pid : fun(pid<Callback.info>) -> proc
        val start_link<$a> : fun(Callback.init_arg) -> [$a]result<proc, start_link_error>
        val start_link_name<$a> : fun(Callback.init_arg, -name name<Callback.global>) -> [$a]result<proc, start_link_error>
        val where_is_local<$a> : fun(binary) -> [$a]option<proc>
        val where_is_global<$a> : fun(Callback.global) -> [$a]option<proc>
        val start_child<$a> : fun(proc, Callback.start_arg) -> [$a]result<pid<Callback.child_info>, start_child_error>
        val which_children<$a> : fun(proc) -> [$a]list<pid<Callback.child_info>>
      end
    end
  end

end = struct
  module Bool = Bool
  module Binary = Binary
  module Option = Option
  module Result = Result
  module List = List
  module RawMap = RawMap
  module RawValue = RawValue
  include ServerUtil
  module GenServer = GenServer
  module Supervisor = Supervisor
end
