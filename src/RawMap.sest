module RawMap = struct

  type t<$k, $v> =
    | Dummy

  val new<$k, $v> : fun() -> t<$k, $v> = external 0 ```
    new() ->
        #{}.
  ```

  val put<$k, $v> : fun($k, $v, t<$k, $v>) -> t<$k, $v> = external 3 ```
    put(Key, Value, Map) ->
        maps:put(Key, Value, Map).
  ```

  val find<$k, $v> : fun($k, t<$k, $v>) -> option<$v> = external 2 ```
    find(Key, Map) ->
        maps:find(Key, Map).
  ```

  val remove<$k, $v> : fun($k, t<$k, $v>) -> t<$k, $v> = external 2 ```
    remove(Key, Map) ->
        maps:remove(Key, Map).
  ```

  val to_list<$k, $v> : fun(t<$k, $v>) -> list<{$k, $v}> = external 1 ```
    to_list(Map) ->
        maps:to_list(Map).
  ```

  val from_list<$k, $v> : fun(list<{$k, $v}>) -> t<$k, $v> = external 1 ```
    from_list(Kvs) ->
        maps:from_list(Kvs).
  ```

  val merge<$k, $v> : fun(t<$k, $v>, t<$k, $v>) -> t<$k, $v> = external 2 ```
    merge(Map1, Map2) ->
        maps:merge(Map1, Map2).
  ```

  val merge_with<$k, $v> : fun(fun($k, $v, $v) -> $v, t<$k, $v>, t<$k, $v>) -> t<$k, $v> = external 3 ```
    merge_with(Combiner, Map1, Map2) ->
        maps:merge_with(Combiner, Map1, Map2).
  ```

  val map<$k, $v1, $v2> : fun(fun($k, $v1) -> $v2, t<$k, $v1>) -> t<$k, $v2> = external 2 ```
    map(Fun, Map) ->
        maps:map(Fun, Map).
  ```

  val fold<$k, $v, $a> : fun(fun($k, $v, $a) -> $a, $a, t<$k, $v>) -> $a = external 3 ```
    fold(Fun, Init, Map) ->
        maps:fold(Fun, Init, Map).
  ```

end
