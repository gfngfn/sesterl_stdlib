import RawValue
import SupervisorCommon
import ServerUtil

module StaticSupervisor = struct
  open ServerUtil

  include SupervisorCommon

  type start_link_error = RawValue.t

  type child_proc =
    | ChildProcDummy

  val make_child_proc<$a, $b, $c, $reason> : fun(fun() -> [$b]result<pid<$a>, $reason>) -> [$c]child_proc = external 1 ```
    make_child_proc(PidF) ->
        PidF().
  ```

  type child_spec<$msg, $id> = {
    id       : $id,
    start    : frozen<unit, $msg, child_proc>,
    restart  : restart,
    shutdown : shutdown,
    typ      : worker,
  }

  val make_child_spec<$msg, $id>(
    -id       id : $id,
    -start    start : frozen<unit, $msg, child_proc>,
    ?restart  restart = Permanent,
    ?shutdown shutdown_opt,
    ?type     typ = Worker,
  ) : child_spec<$msg, $id> =
    let shutdown =
      case {shutdown_opt, typ} of
      | {Some(shutdown), _} -> shutdown
      | {None, Worker}      -> Timeout(5000)
      | {None, Supervisor}  -> Infinity
      end
    in
    {
      id       = id,
      start    = start,
      restart  = restart,
      shutdown = shutdown,
      typ      = typ,
    }

  type strategy =
    | OneForAll | OneForOne | RestForOne

  type sup_flags = {
    strategy  : strategy,
    intensity : int,
    period    : int,
  }

  val make_sup_flags(
    ?strategy  strategy  = OneForOne,
    ?intensity intensity = 1,
    ?period    period    = 5,
  ) : sup_flags =
    {strategy = strategy, intensity = intensity, period = period}

  type initialized<$msg, $id> = {sup_flags, list<child_spec<$msg, $id>>}

  val init_ok<$msg, $id, $reason>(
    sup_flags   : sup_flags,
    child_specs : list<child_spec<$msg, $id>>,
  ) : [$msg]initialized<$msg, $id> = act
    return({sup_flags, child_specs})

  signature Behaviour = sig
    type child_id :: o
    type init_arg :: o
    type info :: o
    type global :: o
    val init : fun(init_arg) -> [info]initialized<info, child_id>
  end

  module Make = fun(Callback : Behaviour) -> #[behaviour("supervisor")] struct

    type proc =
      | ProcDummy

    val init_impl(args) = act
      Callback.init(args)

    val init<$a> : $a = external 1 ```
      init(Args) ->
          {SupFlags, ChildSpecsImpl} = init_impl(Args),
          ChildSpecs =
              lists:map(
                  fun(ChildSpecImpl) ->
                      #{
                          id       := ChildId,
                          start    := StartFunc,
                          restart  := Restart,
                          shutdown := ShutdownImpl,
                          typ      := Worker
                      } = ChildSpecImpl,
                      Shutdown =
                          case ShutdownImpl of
                              brutal_kill  -> brutal_kill;
                              {timeout, N} -> max(N, 0);
                              infinity     -> infinity
                          end,
                      #{
                          id       => ChildId,
                          start    => StartFunc,
                          restart  => Restart,
                          shutdown => Shutdown,
                          type     => Worker
                      }
                  end,
                  ChildSpecsImpl),
          {ok, {SupFlags, ChildSpecs}}.
    ```

    val as_pid : fun(proc) -> pid<Callback.info> = external 1 ```
      as_pid(Pid) -> Pid.
    ```

    val from_pid : fun(pid<Callback.info>) -> proc = external 1 ```
      from_pid(Pid) -> Pid.
    ```

    val start_link<$a> : fun(Callback.init_arg) -> [$a]result<proc, start_link_error> = external 1 ```
      start_link(InitArg) ->
          % io:format("debug L('o' )J (~p) St start_link (pre):~n  ~p~n", [?MODULE, InitArg]),
          % io:format("debug L('o' )J (~p) St start_link (arg):~n  ~p~n", [?MODULE, InitArg]),
          Result = supervisor:start_link(?MODULE, InitArg),
          % io:format("debug L('o' )J (~p) St start_link (ret):~n  ~p~n", [?MODULE, Result]),
          Result.
    ```

    val start_link_name<$a> : fun(Callback.init_arg, -name name<Callback.global>) -> [$a]result<proc, start_link_error> = external 2 ```
      start_link_name(InitArg, NameImpl) ->
          % io:format("debug L('o' )J (~p) St start_link_name (pre):~n  ~p~n", [?MODULE, InitArg]),
          Name =
              case NameImpl of
                  {local, Bin} -> {local, erlang:binary_to_atom(Bin, utf8)};
                  {global, X}  -> {via, global, {?MODULE, X}}
              end,
          % io:format("debug L('o' )J (~p) St start_link_name (arg):~n  ~p~n", [?MODULE, InitArg]),
          Return = supervisor:start_link(Name, ?MODULE, InitArg),
          % io:format("debug L('o' )J (~p) St start_link_name (ret):~n  ~p~n", [?MODULE, Return]),
          Return.
    ```

    val where_is_local<$a> : fun(binary) -> [$a]option<proc> = external 1 ```
      where_is_local(NameBin) ->
          NameAtom = erlang:binary_to_atom(NameBin, utf8),
          case erlang:whereis(NameAtom) of
              Pid when erlang:is_pid(Pid) -> {ok, Pid};
              _                           -> error
          end.
    ```

    val where_is_global<$a> : fun(Callback.global) -> [$a]option<proc> = external 1 ```
      where_is_global(X) ->
          case global:whereis_name({?MODULE, X}) of
              Pid when erlang:is_pid(Pid) -> {ok, Pid};
              undefined                   -> error
          end.
    ```

  end

end
